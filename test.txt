package com.soecode.lyf.github;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLClassLoader;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

import javax.script.Bindings;
import javax.script.Compilable;
import javax.script.CompiledScript;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.SimpleBindings;

import com.google.common.base.Splitter;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.common.collect.Sets.SetView;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.soecode.lyf.enums.Country;
import static com.soecode.lyf.nashorn.BuildException.ErrorCode.*;

import com.soecode.lyf.nashorn.DeflaterUtils;
import com.sun.istack.internal.Nullable;
import groovy.lang.Binding;
import groovy.lang.GroovyClassLoader;
import groovy.lang.GroovyObject;
import groovy.lang.GroovyShell;
import groovy.lang.Script;
import jdk.nashorn.api.scripting.NashornScriptEngineFactory;
import jdk.nashorn.internal.ir.debug.ObjectSizeCalculator;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.junit.Test;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;

import com.alibaba.fastjson.JSONObject;

@Slf4j
public class SkyWalkerTest {
    static final Base64.Decoder decoder = Base64.getDecoder();
    static final Base64.Encoder encoder = Base64.getEncoder();
    /**
     * 压缩
     *     https://www.yiibai.com/javazip/javazip_deflater.html#article-start
     *          *     0 ~ 9 压缩等级 低到高
     *          *     public static final int BEST_COMPRESSION = 9;            最佳压缩的压缩级别。
     *          *     public static final int BEST_SPEED = 1;                  压缩级别最快的压缩。
     *          *     public static final int DEFAULT_COMPRESSION = -1;        默认压缩级别。
     *          *     public static final int DEFAULT_STRATEGY = 0;            默认压缩策略。
     *          *     public static final int DEFLATED = 8;                    压缩算法的压缩方法(目前唯一支持的压缩方法)。
     *          *     public static final int FILTERED = 1;                    压缩策略最适用于大部分数值较小且数据分布随机分布的数据。
     *          *     public static final int FULL_FLUSH = 3;                  压缩刷新模式，用于清除所有待处理的输出并重置拆卸器。
     *          *     public static final int HUFFMAN_ONLY = 2;                仅用于霍夫曼编码的压缩策略。
     *          *     public static final int NO_COMPRESSION = 0;              不压缩的压缩级别。
     *          *     public static final int NO_FLUSH = 0;                    用于实现最佳压缩结果的压缩刷新模式。
     *          *     public static final int SYNC_FLUSH = 2;                  用于清除所有未决输出的压缩刷新模式; 可能会降低某些压缩算法的压缩率。
     */
    public static String zipString(String unzipString) {
        //使用指定的压缩级别创建一个新的压缩器。
        Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION);
        //设置压缩输入数据。
        deflater.setInput(unzipString.getBytes());
        //当被调用时，表示压缩应该以输入缓冲区的当前内容结束。
        deflater.finish();

        final byte[] bytes = new byte[256];
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(256);

        while (!deflater.finished()) {
            //压缩输入数据并用压缩数据填充指定的缓冲区。
            int length = deflater.deflate(bytes);
            outputStream.write(bytes, 0, length);
        }
        //关闭压缩器并丢弃任何未处理的输入。
        deflater.end();
        return encoder.encodeToString(outputStream.toByteArray());
    }

    /**
     * 解压缩
     */
    @Nullable
    public static String unzipString(String zipString) {
        byte[] decode = decoder.decode(zipString);
        //创建一个新的解压缩器  https://www.yiibai.com/javazip/javazip_inflater.html

        Inflater inflater = new Inflater();
        //设置解压缩的输入数据。
        inflater.setInput(decode);
        final byte[] bytes = new byte[256];
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(256);
        try {
            //finished() 如果已到达压缩数据流的末尾，则返回true。
            while (!inflater.finished()) {
                //将字节解压缩到指定的缓冲区中。
                int length = inflater.inflate(bytes);
                outputStream.write(bytes, 0, length);
            }
        } catch (DataFormatException e) {
            e.printStackTrace();
            return null;
        } finally {
            //关闭解压缩器并丢弃任何未处理的输入。
            inflater.end();
        }

        return outputStream.toString();
    }
    /** 预发按钮，diamond 内容 */
    @Test
    public void preButtonTest() {
        String pre2Button = "";
        System.out.println("pre2Button");
        System.out.println(unzipString(pre2Button));

    }

    /** 线上按钮，diamond 内容 */
    @Test
    public void onlineButtonTest() {
        String orderList2Button = "";
        System.out.println("online2Button");
        System.out.println(unzipString(orderList2Button));
    }

    /**
     * 可以将 ThreadLocal<T> 视为 Map<Thread, T> 对象，Kay 为线程Id，
     * ThreadLocal.remove() 的使用方法，如果没有在使用完ThreadLocal之后，调用remove方法，会造成内存泄漏；
     * 当线程退出的时候，这个Thread关联的ThreadLocal会被回收掉；
     * 但是，如果线程不退出，那么，这个ThreadLocal就会在内存中一直存在，造成内存泄漏；
     * 例如：线程池中，qps增加，临时额外造了很多线程，这些线程都有ThreadLocal，但是，qps脉冲退去之后，这些额外的线程会被回收，线程池数量会退回到核心线程数，这些线程的ThreadLocal会被回收掉；
     * 但是，核心线程没有被回收掉，而是一直在复用，核心线程中的ThreadLocal对象，也一直会在内存中。
     * 如果 ThreadLocal<List>，然后，一直add元素，那么，内存会爆掉的；
     * */
    @Test
    public void ThreadLocalRemove() throws Exception {
        ThreadLocal<Integer> localVar = new ThreadLocal<>();
        localVar.set(new Integer(11111));
        // 把ThreadLocal remove 掉,remove 方法将 ThreadLocal里面的ThreadLocalMap里面的value 设置为null；
        localVar.remove();

        Integer var = localVar.get();
        System.out.println("expect null|autual|" + var);
    }

    /**
     * ThreadLocal.withInitial 的使用方法，只要调用下ThreadLocal.get方法，即使 ThreadLocal已经被remove 掉了，
     * 但是，仍会执行 withInitial里面的Supplier方法，重新初始化出一个变量来的。
     * */
    @Test
    public void ThreadLocalWithInitial() throws Exception {
        ThreadLocal<Integer> localVar = ThreadLocal.withInitial(() -> Integer.parseInt("111"));
        System.out.println("expect 111|actual "+localVar.get());
        // 把ThreadLocal remove 掉；
        localVar.remove();

        Integer var = localVar.get();
        // 虽然已经把ThreadLocal remove 掉了，但是，仍然获取到了变量；
        System.out.println("expect 111|autual " + var);
    }

    /**
     * StringUtils.isNumericSpace 如果是空格，会返回 true
     * */
    @Test
    public void StringUtilsisNumericSpace() throws Exception {
        boolean numericSpace = StringUtils.isNumericSpace("  ");
        System.out.println("expect true|actual|" + numericSpace);
    }

    /**
     * StringUtils.isNumeric 如果是""，会返回 true
     * 所以，StringUtils.isNotBlank && StringUtils.isNumeric 必须一起使用才能判断是数字
     * */
    @Test
    public void StringUtilsisNumeric() throws Exception {
        boolean numeric = StringUtils.isNumericSpace("");
        System.out.println("expect true|actual|" + numeric);
    }


    /**
     * 将转义字符，转换为正常的字符。 StringEscapeUtils.unescapeJava
     * */
    @Test
    public void unescapeJavaTest() throws Exception {
        String config = "\\u003d";
        System.out.println(config);
        String s = StringEscapeUtils.unescapeJava(config);
        System.out.println(s);

        String config2 = "\u003d";
        System.out.println("expect = |actual|"+config2);
        String s2 = StringEscapeUtils.unescapeJava(config2);
        System.out.println(s2);
    }


}
